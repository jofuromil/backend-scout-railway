// <auto-generated />
using System;
using BackendScout.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendScout.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250709185454_CrearNivelDistrito")]
    partial class CrearNivelDistrito
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("BackendScout.Models.DocumentoEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsEnlaceExterno")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SubidoPorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("SubidoPorId");

                    b.ToTable("DocumentosEvento");
                });

            modelBuilder.Entity("BackendScout.Models.Especialidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BackendScout.Models.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CupoMaximo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizadorDistritoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrganizadorGrupoId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OrganizadorUnidadId")
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("RamasDestino")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizadorUnidadId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("BackendScout.Models.FichaMedica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alergias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Colegio")
                        .HasColumnType("TEXT");

                    b.Property<string>("CondicionesAlimentarias")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Curso")
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Medicamentos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NivelFormacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreContactoEmergencia")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreMadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombrePadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacionesMedicas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profesion")
                        .HasColumnType("TEXT");

                    b.Property<string>("SeguroSalud")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoContactoEmergencia")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoMadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefonoPadre")
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoSangre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FichasMedicas");
                });

            modelBuilder.Entity("BackendScout.Models.Gestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Activa")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstaActiva")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Gestiones");
                });

            modelBuilder.Entity("BackendScout.Models.GrupoScout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelDistritoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NivelDistritoId");

                    b.ToTable("GruposScout");
                });

            modelBuilder.Entity("BackendScout.Models.GrupoScoutUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsAdminGrupo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupoScoutId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GrupoScoutId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("GrupoScoutUsuarios");
                });

            modelBuilder.Entity("BackendScout.Models.Mensaje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DirigenteId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiraEl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("RutaArchivo")
                        .HasColumnType("TEXT");

                    b.Property<string>("RutaImagen")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnidadId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirigenteId");

                    b.HasIndex("UnidadId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("BackendScout.Models.MensajeEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RemitenteId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("RemitenteId");

                    b.ToTable("MensajesEvento");
                });

            modelBuilder.Entity("BackendScout.Models.MensajeEventoDestinatario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MensajeEventoId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MensajeEventoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("MensajesEventoDestinatarios");
                });

            modelBuilder.Entity("BackendScout.Models.NivelDistrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NivelesDistrito");
                });

            modelBuilder.Entity("BackendScout.Models.NivelDistritoUsuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsAdminDistrito")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EsInvitadoEvento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelDistritoId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NivelDistritoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("NivelDistritoUsuario");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoEducativo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EdadMaxima")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EdadMinima")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NivelProgresion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ObjetivosEducativos");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoSeleccionado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DirigenteValidadorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaSeleccion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaValidacion")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ObjetivoEducativoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Validado")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DirigenteValidadorId");

                    b.HasIndex("ObjetivoEducativoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ObjetivosSeleccionados");
                });

            modelBuilder.Entity("BackendScout.Models.PasswordResetCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Usado")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("PasswordResetCodes");
                });

            modelBuilder.Entity("BackendScout.Models.RegistroGestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AprobadoDistrito")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AprobadoGrupo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AprobadoNacional")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CI")
                        .HasColumnType("TEXT");

                    b.Property<string>("DistritoNombre")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EnviadoADistrito")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnviadoANacional")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaAprobadoDistrito")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaAprobadoGrupo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaAprobadoNacional")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaEnvioDistrito")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GrupoNombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .HasColumnType("TEXT");

                    b.Property<string>("UnidadNombre")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GestionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RegistrosGestion");
                });

            modelBuilder.Entity("BackendScout.Models.Requisito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EspecialidadId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("Requisitos");
                });

            modelBuilder.Entity("BackendScout.Models.RequisitoCumplido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AprobadoPorDirigente")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DirigenteValidadorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaAprobacion")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RequisitoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScoutId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DirigenteValidadorId");

                    b.HasIndex("RequisitoId");

                    b.HasIndex("ScoutId");

                    b.ToTable("RequisitoCumplidos");
                });

            modelBuilder.Entity("BackendScout.Models.Unidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CodigoUnidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DirigenteId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GrupoScoutId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GrupoScoutNombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NivelDistritoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GrupoScoutId");

                    b.HasIndex("NivelDistritoId");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("BackendScout.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CI")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EsAdminGrupoScout")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genero")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstitucionEducativa")
                        .HasColumnType("TEXT");

                    b.Property<string>("NivelEstudios")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Profesion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UnidadId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UnidadId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventoOrganizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizadoresEvento");
                });

            modelBuilder.Entity("UsuarioEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventoId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoParticipacion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("EventoId1");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioEvento");
                });

            modelBuilder.Entity("BackendScout.Models.DocumentoEvento", b =>
                {
                    b.HasOne("BackendScout.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "SubidoPor")
                        .WithMany()
                        .HasForeignKey("SubidoPorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("SubidoPor");
                });

            modelBuilder.Entity("BackendScout.Models.Evento", b =>
                {
                    b.HasOne("BackendScout.Models.Unidad", "OrganizadorUnidad")
                        .WithMany("EventosOrganizados")
                        .HasForeignKey("OrganizadorUnidadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OrganizadorUnidad");
                });

            modelBuilder.Entity("BackendScout.Models.GrupoScout", b =>
                {
                    b.HasOne("BackendScout.Models.NivelDistrito", "NivelDistrito")
                        .WithMany("GruposScout")
                        .HasForeignKey("NivelDistritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NivelDistrito");
                });

            modelBuilder.Entity("BackendScout.Models.GrupoScoutUsuario", b =>
                {
                    b.HasOne("BackendScout.Models.GrupoScout", "GrupoScout")
                        .WithMany("GrupoScoutUsuarios")
                        .HasForeignKey("GrupoScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany("GrupoScoutUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrupoScout");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.Mensaje", b =>
                {
                    b.HasOne("BackendScout.Models.User", "Dirigente")
                        .WithMany()
                        .HasForeignKey("DirigenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dirigente");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("BackendScout.Models.MensajeEvento", b =>
                {
                    b.HasOne("BackendScout.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Remitente")
                        .WithMany()
                        .HasForeignKey("RemitenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Remitente");
                });

            modelBuilder.Entity("BackendScout.Models.MensajeEventoDestinatario", b =>
                {
                    b.HasOne("BackendScout.Models.MensajeEvento", "MensajeEvento")
                        .WithMany("Destinatarios")
                        .HasForeignKey("MensajeEventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MensajeEvento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.NivelDistritoUsuario", b =>
                {
                    b.HasOne("BackendScout.Models.NivelDistrito", "NivelDistrito")
                        .WithMany("NivelDistritoUsuarios")
                        .HasForeignKey("NivelDistritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany("NivelDistritoUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NivelDistrito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.ObjetivoSeleccionado", b =>
                {
                    b.HasOne("BackendScout.Models.User", "DirigenteValidador")
                        .WithMany()
                        .HasForeignKey("DirigenteValidadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackendScout.Models.ObjetivoEducativo", "ObjetivoEducativo")
                        .WithMany()
                        .HasForeignKey("ObjetivoEducativoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirigenteValidador");

                    b.Navigation("ObjetivoEducativo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.PasswordResetCode", b =>
                {
                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.RegistroGestion", b =>
                {
                    b.HasOne("BackendScout.Models.Gestion", "Gestion")
                        .WithMany("Registros")
                        .HasForeignKey("GestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendScout.Models.Requisito", b =>
                {
                    b.HasOne("BackendScout.Models.Especialidad", "Especialidad")
                        .WithMany("Requisitos")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("BackendScout.Models.RequisitoCumplido", b =>
                {
                    b.HasOne("BackendScout.Models.User", "DirigenteValidador")
                        .WithMany()
                        .HasForeignKey("DirigenteValidadorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BackendScout.Models.Requisito", "Requisito")
                        .WithMany()
                        .HasForeignKey("RequisitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "Scout")
                        .WithMany()
                        .HasForeignKey("ScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirigenteValidador");

                    b.Navigation("Requisito");

                    b.Navigation("Scout");
                });

            modelBuilder.Entity("BackendScout.Models.Unidad", b =>
                {
                    b.HasOne("BackendScout.Models.GrupoScout", "GrupoScout")
                        .WithMany("Unidades")
                        .HasForeignKey("GrupoScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.NivelDistrito", "NivelDistrito")
                        .WithMany("Unidades")
                        .HasForeignKey("NivelDistritoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrupoScout");

                    b.Navigation("NivelDistrito");
                });

            modelBuilder.Entity("BackendScout.Models.User", b =>
                {
                    b.HasOne("BackendScout.Models.Unidad", "Unidad")
                        .WithMany()
                        .HasForeignKey("UnidadId");

                    b.Navigation("Unidad");
                });

            modelBuilder.Entity("EventoOrganizador", b =>
                {
                    b.HasOne("BackendScout.Models.Evento", "Evento")
                        .WithMany("Organizadores")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UsuarioEvento", b =>
                {
                    b.HasOne("BackendScout.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendScout.Models.Evento", null)
                        .WithMany("Participantes")
                        .HasForeignKey("EventoId1");

                    b.HasOne("BackendScout.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackendScout.Models.Especialidad", b =>
                {
                    b.Navigation("Requisitos");
                });

            modelBuilder.Entity("BackendScout.Models.Evento", b =>
                {
                    b.Navigation("Organizadores");

                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("BackendScout.Models.Gestion", b =>
                {
                    b.Navigation("Registros");
                });

            modelBuilder.Entity("BackendScout.Models.GrupoScout", b =>
                {
                    b.Navigation("GrupoScoutUsuarios");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("BackendScout.Models.MensajeEvento", b =>
                {
                    b.Navigation("Destinatarios");
                });

            modelBuilder.Entity("BackendScout.Models.NivelDistrito", b =>
                {
                    b.Navigation("GruposScout");

                    b.Navigation("NivelDistritoUsuarios");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("BackendScout.Models.Unidad", b =>
                {
                    b.Navigation("EventosOrganizados");
                });

            modelBuilder.Entity("BackendScout.Models.User", b =>
                {
                    b.Navigation("GrupoScoutUsuarios");

                    b.Navigation("NivelDistritoUsuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
